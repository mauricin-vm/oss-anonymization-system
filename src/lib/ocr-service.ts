import { createWorker } from 'tesseract.js'
import { fromPath } from 'pdf2pic'
import fs from 'fs'
import path from 'path'

export class OCRService {

  constructor() {
    console.log('OCRService inicializado com pdf-parse e tesseract.js')
  }

  async extractTextFromPdf(pdfBuffer: Buffer, maxPages: number = 10): Promise<string | null> {
    console.log('=== INICIANDO EXTRA√á√ÉO DE TEXTO ===')
    console.log(`Tamanho do PDF: ${pdfBuffer.length} bytes`)

    try {
      // Primeiro tenta extrair texto diretamente do PDF (para PDFs com texto selecion√°vel)
      console.log('üîç Tentativa 1: Extra√ß√£o direta de texto do PDF...')
      const directText = await this.extractDirectTextFromPdf(pdfBuffer)

      if (directText && directText.trim().length > 100) {
        console.log(`‚úÖ SUCESSO - Texto extra√≠do diretamente: ${directText.length} caracteres`)
        console.log('üìù Primeiros 200 caracteres:', directText.substring(0, 200))
        return directText
      } else {
        console.log('‚ö†Ô∏è Pouco ou nenhum texto encontrado na extra√ß√£o direta')
        console.log(`Texto encontrado: ${directText?.length || 0} caracteres`)
      }

      // Se n√£o conseguiu extrair texto diretamente, usa OCR
      console.log('üîç Tentativa 2: Usando OCR nas imagens das p√°ginas...')
      const ocrText = await this.extractTextWithOCR(pdfBuffer, maxPages)

      if (ocrText && ocrText.trim().length > 0) {
        console.log(`‚úÖ SUCESSO - Texto extra√≠do via OCR: ${ocrText.length} caracteres`)
        console.log('üìù Primeiros 200 caracteres:', ocrText.substring(0, 200))
        return ocrText
      } else {
        console.log('‚ùå OCR n√£o conseguiu extrair texto')
      }

    } catch (error) {
      console.error('‚ùå ERRO na extra√ß√£o de texto:', error)
    }

    console.log('‚ùå FALHA COMPLETA - Nenhum texto foi extra√≠do')
    return null
  }

  private async extractDirectTextFromPdf(pdfBuffer: Buffer): Promise<string | null> {
    try {
      console.log('Executando pdf-parse...')

      // Import din√¢mico para evitar problemas no build
      const pdfParse = (await import('pdf-parse')).default
      const data = await pdfParse(pdfBuffer)

      console.log(`PDF info - P√°ginas: ${data.numpages}, Texto: ${data.text.length} chars`)

      if (data.text && data.text.trim().length > 0) {
        return data.text
      }

      return null
    } catch (error) {
      console.error('Erro no pdf-parse:', error)
      return null
    }
  }

  private async extractTextWithOCR(pdfBuffer: Buffer, maxPages: number): Promise<string | null> {
    const tempDir = path.join(process.cwd(), 'temp_ocr')
    const tempPdfPath = path.join(tempDir, `temp_${Date.now()}.pdf`)

    try {
      // Criar diret√≥rio tempor√°rio se n√£o existir
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true })
      }

      // Salvar PDF tempor√°rio
      fs.writeFileSync(tempPdfPath, pdfBuffer)
      console.log(`PDF salvo temporariamente em: ${tempPdfPath}`)

      // Configurar convers√£o PDF para imagens
      const convert = fromPath(tempPdfPath, {
        density: 200,
        saveFilename: "page",
        savePath: tempDir,
        format: "png",
        width: 2000,
        height: 2000
      })

      let allText = ''
      const pagesToProcess = Math.min(maxPages, 5) // Limitar para teste

      console.log(`üîÑ Processando ${pagesToProcess} p√°ginas com OCR...`)

      // Inicializar worker do Tesseract
      const worker = await createWorker(['por', 'eng'])

      // Processar cada p√°gina
      for (let pageNum = 1; pageNum <= pagesToProcess; pageNum++) {
        try {
          console.log(`üìÑ Processando p√°gina ${pageNum}/${pagesToProcess}...`)

          // Converter p√°gina para imagem
          const result = await convert(pageNum, { responseType: "buffer" })

          if (result.buffer) {
            console.log(`Imagem da p√°gina ${pageNum} gerada: ${result.buffer.length} bytes`)

            // Aplicar OCR com Tesseract
            const { data: { text } } = await worker.recognize(result.buffer)

            if (text && text.trim().length > 0) {
              console.log(`üìù P√°gina ${pageNum}: ${text.length} caracteres extra√≠dos`)
              allText += `\n--- P√ÅGINA ${pageNum} ---\n${text.trim()}\n`
            } else {
              console.warn(`‚ö†Ô∏è P√°gina ${pageNum}: Nenhum texto encontrado`)
            }
          } else {
            console.warn(`‚ö†Ô∏è P√°gina ${pageNum}: Falha na convers√£o para imagem`)
          }

        } catch (pageError) {
          console.warn(`‚ùå Erro ao processar p√°gina ${pageNum}:`, pageError)
          allText += `\n--- P√ÅGINA ${pageNum} ---\n[Erro ao processar esta p√°gina]\n`
        }
      }

      // Fechar worker
      await worker.terminate()

      if (allText.trim().length > 0) {
        console.log(`‚úÖ OCR conclu√≠do: ${allText.length} caracteres extra√≠dos`)
        return allText
      } else {
        console.log('‚ùå OCR n√£o conseguiu extrair texto de nenhuma p√°gina')
        return null
      }

    } catch (error) {
      console.error('‚ùå Erro no processo de OCR:', error)
      return null
    } finally {
      // Limpar arquivos tempor√°rios
      this.cleanupTempFiles(tempDir)
    }
  }

  private cleanupTempFiles(tempDir: string): void {
    try {
      if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir)
        console.log(`üßπ Limpando ${files.length} arquivos tempor√°rios...`)

        files.forEach(file => {
          const filePath = path.join(tempDir, file)
          try {
            fs.unlinkSync(filePath)
          } catch (err) {
            console.warn(`‚ö†Ô∏è Erro ao remover arquivo tempor√°rio ${filePath}:`, err)
          }
        })

        // Tentar remover o diret√≥rio
        try {
          fs.rmdirSync(tempDir)
          console.log('‚úÖ Diret√≥rio tempor√°rio removido')
        } catch (err) {
          console.warn('‚ö†Ô∏è Erro ao remover diret√≥rio tempor√°rio:', err)
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro na limpeza dos arquivos tempor√°rios:', error)
    }
  }
}