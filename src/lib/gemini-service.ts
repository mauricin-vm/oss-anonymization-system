import { GoogleGenerativeAI } from '@google/generative-ai'

export class GeminiService {
  private genAI: GoogleGenerativeAI
  private model: any

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY n√£o est√° configurada nas vari√°veis de ambiente')
    }

    this.genAI = new GoogleGenerativeAI(apiKey)
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
  }

  async anonymizeTextChunk(textChunk: string): Promise<string> {
    try {
      const prompt = `
Voc√™ √© um especialista em anonimiza√ß√£o de documentos jur√≠dicos conforme LGPD e sigilo fiscal.

INSTRU√á√ïES RIGOROSAS:

**ANONIMIZAR OBRIGATORIAMENTE:**
‚Ä¢ Nomes de pessoas f√≠sicas ‚Üí [PESSOA F√çSICA X]
‚Ä¢ CPF (XXX.XXX.XXX-XX) ‚Üí [CPF ANONIMIZADO]  
‚Ä¢ RG/Identidade ‚Üí [DOCUMENTO ANONIMIZADO]
‚Ä¢ Endere√ßos completos ‚Üí [ENDERE√áO ANONIMIZADO]
‚Ä¢ Telefones ‚Üí [TELEFONE ANONIMIZADO]
‚Ä¢ E-mails pessoais ‚Üí [EMAIL ANONIMIZADO]
‚Ä¢ Dados banc√°rios ‚Üí [DADOS BANC√ÅRIOS ANONIMIZADOS]
‚Ä¢ Valores monet√°rios espec√≠ficos ‚Üí [VALOR ANONIMIZADO]
‚Ä¢ Datas de nascimento ‚Üí [DATA NASCIMENTO ANONIMIZADA]

**PRESERVAR OBRIGATORIAMENTE:**
‚Ä¢ Nomes de empresas e raz√µes sociais
‚Ä¢ N√∫meros de processos judiciais  
‚Ä¢ Datas de decis√µes judiciais
‚Ä¢ N√∫meros de ac√≥rd√£os e RVs
‚Ä¢ Nomes de magistrados, desembargadores e ju√≠zes
‚Ä¢ Nomes de advogados (OAB)
‚Ä¢ Fundamentos legais e jurisprud√™ncia
‚Ä¢ Argumentos jur√≠dicos
‚Ä¢ Estrutura do documento

**REGRAS:**
- Use numera√ß√£o sequencial para pessoas ([PESSOA F√çSICA 1], [PESSOA F√çSICA 2])
- Preserve toda formata√ß√£o e estrutura
- Mantenha par√°grafos e quebras de linha
- Seja consistente nas substitui√ß√µes

TEXTO PARA ANONIMIZAR:
${textChunk}

IMPORTANTE: Retorne APENAS o texto anonimizado, preservando toda a formata√ß√£o original:
`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      return response.text()

    } catch (error) {
      console.error('Erro na anonimiza√ß√£o do chunk:', error)
      // Fallback: anonimiza√ß√£o manual b√°sica
      return this.manualAnonymization(textChunk)
    }
  }

  private manualAnonymization(text: string): string {
    // Fallback de anonimiza√ß√£o manual se a IA falhar
    return text
      .replace(/\b[A-Z√Å√ä√ç√ì√ö√Ç√î√á][a-z√°√™√≠√≥√∫√¢√¥√ß√£√µ]+\s+[A-Z√Å√ä√ç√ì√ö√Ç√î√á][a-z√°√™√≠√≥√∫√¢√¥√ß√£√µ]+(?:\s+[A-Z√Å√ä√ç√ì√ö√Ç√î√á][a-z√°√™√≠√≥√∫√¢√¥√ß√£√µ]+)*\b/g, '[PESSOA F√çSICA ANONIMIZADA]')
      .replace(/\b\d{3}\.\d{3}\.\d{3}-\d{2}\b/g, '[CPF ANONIMIZADO]')
      .replace(/\b\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}\b/g, '[CNPJ ANONIMIZADO]')
      .replace(/R\$\s*\d+(?:\.\d{3})*(?:,\d{2})?/g, '[VALOR ANONIMIZADO]')
      .replace(/\b\d{2}\/\d{2}\/\d{4}\b/g, '[DATA ANONIMIZADA]')
      .replace(/\(\d{2}\)\s*\d{4,5}-\d{4}/g, '[TELEFONE ANONIMIZADO]')
      .replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g, '[EMAIL ANONIMIZADO]')
  }

  async processTextInChunks(fullText: string, chunkSize: number = 2000): Promise<string> {
    console.log(`üîÑ PROCESSAMENTO EM CHUNKS - Texto: ${fullText.length} caracteres | Tamanho do chunk: ${chunkSize}`)

    const chunks = this.splitTextIntoChunks(fullText, chunkSize)
    const anonymizedChunks: string[] = []

    console.log(`üìä Total de chunks para processar: ${chunks.length}`)

    for (let i = 0; i < chunks.length; i++) {
      console.log(`\nü§ñ Processando chunk ${i + 1}/${chunks.length} (${chunks[i].length} caracteres)`)
      console.log(`üìù Trecho do chunk: "${chunks[i].substring(0, 100)}..."`)

      try {
        const startTime = Date.now()
        const anonymizedChunk = await this.anonymizeTextChunk(chunks[i])
        const endTime = Date.now()

        console.log(`‚úÖ Chunk ${i + 1} anonimizado com sucesso em ${endTime - startTime}ms`)
        console.log(`üìù Resultado: "${anonymizedChunk.substring(0, 100)}..."`)
        console.log(`üìä Tamanho: ${chunks[i].length} ‚Üí ${anonymizedChunk.length} caracteres`)

        anonymizedChunks.push(anonymizedChunk)

        // Pequena pausa para evitar rate limiting
        if (i < chunks.length - 1) {
          console.log('‚è≥ Aguardando 500ms antes do pr√≥ximo chunk...')
          await new Promise(resolve => setTimeout(resolve, 500))
        }
      } catch (error) {
        console.error(`‚ùå Erro no chunk ${i + 1}:`, error)
        console.log(`üîÑ Usando chunk original como fallback`)
        // Em caso de erro, usar o chunk original
        anonymizedChunks.push(chunks[i])
      }
    }

    const finalText = anonymizedChunks.join('')
    console.log(`\n‚úÖ PROCESSAMENTO CONCLU√çDO - ${finalText.length} caracteres finais`)

    return finalText
  }

  private splitTextIntoChunks(text: string, chunkSize: number): string[] {
    const chunks: string[] = []
    let startIndex = 0

    while (startIndex < text.length) {
      let endIndex = Math.min(startIndex + chunkSize, text.length)

      // Tentar quebrar em uma quebra de linha para n√£o cortar frases
      if (endIndex < text.length) {
        const lastNewline = text.lastIndexOf('\n', endIndex)
        const lastPeriod = text.lastIndexOf('.', endIndex)
        const lastSpace = text.lastIndexOf(' ', endIndex)

        // Usar a melhor quebra dispon√≠vel
        if (lastNewline > startIndex + chunkSize * 0.8) {
          endIndex = lastNewline + 1
        } else if (lastPeriod > startIndex + chunkSize * 0.8) {
          endIndex = lastPeriod + 1
        } else if (lastSpace > startIndex + chunkSize * 0.8) {
          endIndex = lastSpace + 1
        }
      }

      chunks.push(text.slice(startIndex, endIndex))
      startIndex = endIndex
    }

    return chunks
  }
}